[2025-03-11T04:57:28.232+0000] {taskinstance.py:1159} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: ingest_bronze_layer_dag.fetch_purchases manual__2025-03-11T04:55:58+00:00 [queued]>
[2025-03-11T04:57:28.235+0000] {taskinstance.py:1159} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: ingest_bronze_layer_dag.fetch_purchases manual__2025-03-11T04:55:58+00:00 [queued]>
[2025-03-11T04:57:28.235+0000] {taskinstance.py:1361} INFO - Starting attempt 1 of 1
[2025-03-11T04:57:28.241+0000] {taskinstance.py:1382} INFO - Executing <Task(_PythonDecoratedOperator): fetch_purchases> on 2025-03-11 04:55:58+00:00
[2025-03-11T04:57:28.243+0000] {standard_task_runner.py:57} INFO - Started process 5364 to run task
[2025-03-11T04:57:28.245+0000] {standard_task_runner.py:84} INFO - Running: ['***', 'tasks', 'run', 'ingest_bronze_layer_dag', 'fetch_purchases', 'manual__2025-03-11T04:55:58+00:00', '--job-id', '28', '--raw', '--subdir', 'DAGS_FOLDER/ingesting_pipeline.py', '--cfg-path', '/tmp/tmpwogdux_t']
[2025-03-11T04:57:28.246+0000] {standard_task_runner.py:85} INFO - Job 28: Subtask fetch_purchases
[2025-03-11T04:57:28.264+0000] {task_command.py:416} INFO - Running <TaskInstance: ingest_bronze_layer_dag.fetch_purchases manual__2025-03-11T04:55:58+00:00 [running]> on host 50aa08a06197
[2025-03-11T04:57:28.396+0000] {taskinstance.py:1662} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='Andrew Tran' AIRFLOW_CTX_DAG_ID='ingest_bronze_layer_dag' AIRFLOW_CTX_TASK_ID='fetch_purchases' AIRFLOW_CTX_EXECUTION_DATE='2025-03-11T04:55:58+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-03-11T04:55:58+00:00'
[2025-03-11T04:57:28.399+0000] {base.py:73} INFO - Using connection ID 'postgres_source_db' for task execution.
[2025-03-11T04:57:28.400+0000] {logging_mixin.py:154} INFO - Incremental time: {{ ti.get_previous_start_date(state="success").strftime("%Y-%m-%d %H:%M:%S") if (ti.get_previous_start_date(state="success") and params.is_full_refresh == "False") else "1900-01-01 00:00:00" }}
[2025-03-11T04:57:28.403+0000] {warnings.py:109} WARNING - /opt/***/dags/ingesting_pipeline.py:58: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  df = pd.read_sql(query, conn)

[2025-03-11T04:57:28.404+0000] {taskinstance.py:1937} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.10/site-packages/pandas/io/sql.py", line 2262, in execute
    cur.execute(sql, *args)
psycopg2.errors.InvalidDatetimeFormat: invalid input syntax for type timestamp: "{{ ti.get_previous_start_date(state="success").strftime("%Y-%m-%d %H:%M:%S") if (ti.get_previous_start_date(state="success") and params.is_full_refresh == "False") else "1900-01-01 00:00:00" }}"
LINE 4:         WHERE updated_at > '{{ ti.get_previous_start_date(st...
                                   ^


The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.10/site-packages/airflow/decorators/base.py", line 221, in execute
    return_value = super().execute(context)
  File "/home/airflow/.local/lib/python3.10/site-packages/airflow/operators/python.py", line 192, in execute
    return_value = self.execute_callable()
  File "/home/airflow/.local/lib/python3.10/site-packages/airflow/operators/python.py", line 209, in execute_callable
    return self.python_callable(*self.op_args, **self.op_kwargs)
  File "/opt/airflow/dags/ingesting_pipeline.py", line 58, in fetch_purchases
    df = pd.read_sql(query, conn)
  File "/home/airflow/.local/lib/python3.10/site-packages/pandas/io/sql.py", line 654, in read_sql
    return pandas_sql.read_query(
  File "/home/airflow/.local/lib/python3.10/site-packages/pandas/io/sql.py", line 2326, in read_query
    cursor = self.execute(sql, params)
  File "/home/airflow/.local/lib/python3.10/site-packages/pandas/io/sql.py", line 2274, in execute
    raise ex from exc
pandas.errors.DatabaseError: Execution failed on sql '
        SELECT *, NOW() as extracted_at
        FROM app_source.purchases_data
        WHERE updated_at > '{{ ti.get_previous_start_date(state="success").strftime("%Y-%m-%d %H:%M:%S") if (ti.get_previous_start_date(state="success") and params.is_full_refresh == "False") else "1900-01-01 00:00:00" }}'
        ': invalid input syntax for type timestamp: "{{ ti.get_previous_start_date(state="success").strftime("%Y-%m-%d %H:%M:%S") if (ti.get_previous_start_date(state="success") and params.is_full_refresh == "False") else "1900-01-01 00:00:00" }}"
LINE 4:         WHERE updated_at > '{{ ti.get_previous_start_date(st...
                                   ^

[2025-03-11T04:57:28.407+0000] {taskinstance.py:1400} INFO - Marking task as FAILED. dag_id=ingest_bronze_layer_dag, task_id=fetch_purchases, execution_date=20250311T045558, start_date=20250311T045728, end_date=20250311T045728
[2025-03-11T04:57:28.412+0000] {standard_task_runner.py:104} ERROR - Failed to execute job 28 for task fetch_purchases (Execution failed on sql '
        SELECT *, NOW() as extracted_at
        FROM app_source.purchases_data
        WHERE updated_at > '{{ ti.get_previous_start_date(state="success").strftime("%Y-%m-%d %H:%M:%S") if (ti.get_previous_start_date(state="success") and params.is_full_refresh == "False") else "1900-01-01 00:00:00" }}'
        ': invalid input syntax for type timestamp: "{{ ti.get_previous_start_date(state="success").strftime("%Y-%m-%d %H:%M:%S") if (ti.get_previous_start_date(state="success") and params.is_full_refresh == "False") else "1900-01-01 00:00:00" }}"
LINE 4:         WHERE updated_at > '{{ ti.get_previous_start_date(st...
                                   ^
; 5364)
[2025-03-11T04:57:28.433+0000] {local_task_job_runner.py:228} INFO - Task exited with return code 1
[2025-03-11T04:57:28.440+0000] {taskinstance.py:2778} INFO - 0 downstream tasks scheduled from follow-on schedule check
